/*----------------------
Data(Expressed as approximate percentage size difference in sqrt sets on (-n, n) compared to the sequence of triangular numbers skipping every 3rd one):
~15% worse for n=100
~3% worse for n=1000
~29% better for n=10000
~23% better for n=10^5
~13% better for n=10^6
~17% better for n=10^7
~23% better for n=10^8
~26% better for n=10^9
----------------------*/

#include <iostream>
#include <list>
#include <algorithm>

using namespace std;

long sqrtScaledSize = 0;
list<long> sqrtSet;
//Input the size of the interval you want the set to be a sqrt of
bool data [1000000];

//Add attempts to add an input into the sqrt set.
void Add(long i){
    //Check for duplicates; return if i is already in the set
    list<long>::iterator findItr = find(sqrtSet.begin(), sqrtSet.end(), i);
    if(*findItr == i){
        return;
    }
    //Print i
    cout << i << "\n";
    //Add i to the set
    sqrtSet.push_back(i);
    //Iterate over the set to determine all values newly obtainable by squaring the set
    list<long>::iterator it;
    for(it = sqrtSet.begin(); it!= sqrtSet.end(); ++it){
        if(*it+i < sizeof(data)){
            data[*it + i] = true;
        }
        if(i-*it >= 0){
            data[i-*it] = true;
        }
        
    }
    
    //Get the "Scaled Size"; the size of the part of the sqrt set within [0, n], where n is the size of the interval.
    //Known bug: off by one error
    if(i < sizeof(data)){
            sqrtScaledSize ++;
        }
    else{
        cout << "Scaled Size: " << sqrtScaledSize << "\n";
        exit(0);
    }
}

int main()
{
    //Iterage over the integers from 1->n, adding integers differing by k to the set for each k not obtained.
    long iterator = 0;
    while(iterator < sizeof(data)){
        if(data[iterator] == true){
            iterator++;
        }
        else{
            Add(iterator * (iterator - 1)/2);
            Add(iterator * (iterator + 1)/2);
            iterator++;
        }
    }
    cout << "Scaled Size: " << sqrtScaledSize;
    
    

    return 0;
}
